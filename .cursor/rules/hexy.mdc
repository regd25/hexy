---
description: 
globs: 
alwaysApply: true
---
# Hexy Development Process

## Development Process

### 1. Domain Layer Development
- Define core entities and value objects
- Implement domain services
- Define repository interfaces
- Create domain events
- Write domain tests

### 2. Application Layer Development
- Implement use cases
- Create application services
- Define DTOs
- Implement command/query handlers
- Write application tests

### 3. Infrastructure Layer Development
- Implement repository adapters
- Create external service integrations
- Implement infrastructure services
- Write infrastructure tests

### 4. Code Generation
- Define templates
- Implement generators
- Create configuration handlers
- Write generator tests

### 5. CLI Development
- Implement commands
- Create command handlers
- Add CLI utilities
- Write CLI tests

## Coding Standards

### TypeScript Guidelines
- Use strict type checking
- Implement interfaces for all public APIs
- Use dependency injection
- Follow SOLID principles
- Write comprehensive tests
- kebab-case for every folders and files

### Documentation
- Document all public APIs
- Include usage examples
- Maintain README files
- Document architectural decisions

### Testing Strategy
- Domain layer: Unit tests
- Application layer: Integration tests
- Infrastructure layer: Integration tests
- CLI: End-to-end tests

## Development Workflow
1. Create feature branch
2. Implement changes following the layer structure
3. Write tests
4. Update documentation
5. Create pull request
6. Code review
7. Merge to main branch

## Best Practices
- Keep domain layer pure and independent
- Use dependency injection
- Follow single responsibility principle
- Implement proper error handling
- Use meaningful naming conventions
- Write clean, maintainable code
