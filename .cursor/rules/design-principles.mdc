---
description: 
globs: 
alwaysApply: false
---
# üß† Principios de Dise√±o de Hexy

## 1. ‚ú® El Dominio es el Coraz√≥n del Software
> _‚ÄúThe heart of software is its ability to solve domain related problems for the user.‚Äù ‚Äì Eric Evans_

- El c√≥digo gira en torno al **modelo del dominio**, no a detalles t√©cnicos.
- El dominio se ubica en su propia capa, aislada de la infraestructura y la aplicaci√≥n.
- La l√≥gica de negocio es expl√≠cita, testeable y evolutiva.

## 2. ‚öñÔ∏è Modelo Unido al C√≥digo
- El modelo conceptual est√° **estrechamente vinculado** a la implementaci√≥n.
- Entidades, objetos de valor y servicios reflejan el **lenguaje del negocio**.
- Hexy impone una estructura de carpetas por contexto y servicio que expresa el modelo en el c√≥digo:
  ```
  domain/
    {name}-{entity-name}.ts
    {name}-{value-object-name}.ts
    {name}.ts
    {name}-repository.ts
  usecase/
    {name}-use-case.ts
    {}
  controllers/
    {name}-controller.ts
  adapters/
    postgres-{name}-repository.ts
    in-memory-{name}-repository.ts
  ```

## 3. üé§ Lenguaje Ubicuo
- Nombres en el c√≥digo reflejan conceptos del dominio.
- El lenguaje compartido entre negocio y desarrollo se ve reflejado en:
  - Clases y m√©todos
  - Eventos de dominio
  - Casos de uso y controladores

## 4. üè† Separaci√≥n de Responsabilidades (Arquitectura Hexagonal)
- El dominio no depende de tecnolog√≠a.
- Puertos y adaptadores desacoplan infraestructura.
- Hexy define:
  - `application/` orquesta casos de uso
  - `domain/` contiene reglas de negocio
  - `infrastructure/` adapta al mundo exterior

## 5. ‚úÖ Testabilidad y Mantenibilidad
- Dominio puro, sin dependencias externas.
- Contratos definidos por interfaces.
- Inyecci√≥n de dependencias basada en m√≥dulos.
- Casos de uso (`UseCase`) como funciones puras.

## 6. üìÉ Expl√≠cito es Mejor que Impl√≠cito
- Entidades tienen identidad y comportamientos definidos.
- Objetos de valor son inmutables y representan conceptos puros.
- Las reglas del negocio viven en el dominio, no en controladores.

## 7. üè∞ Modularidad y Evoluci√≥n Guiada por el Dominio
- Organizaci√≥n modular por **contexto** y **servicio**.
- Cada requerimiento provoca cambios en el modelo.
- La iteraci√≥n se basa en:
  - Exploraci√≥n del dominio
  - Conversaciones con expertos
  - Refactorizaciones guiadas por el conocimiento adquirido

---

_"Hexy no es solo un framework, es una filosof√≠a de dise√±o centrada en el negocio."_

