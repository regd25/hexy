---
description: 
globs: 
alwaysApply: false
---
# 📌 Definition of Bounded Contexts and Shared Resources for Hexy Framework

This document clearly defines the internal **Bounded Contexts** and the shared resources (`shared`) of the **Hexy** framework. The organization proposed here follows the principles of Domain-Driven Design (DDD) and Hexagonal Architecture.

## 🗃️ Bounded Contexts of the Hexy Framework

### 🌐 1. Core

Abstractions and core elements of the framework.

- **Aggregates:**
  - aggregate-root
  - entity
- **Value Objects:**
  - identifier
  - timestamp
- **Services:**
  - domain-event-publisher
  - event-bus
- **Events:**
  - domain-event

### ⚙️ 2. CLI (Command Line Interface)

Logic for the command-line interface.

- **Use Cases:** create-context, create-service, configure-aggregate, configure-repository, configure-value-object, configure-event, configure-event-handler, configure-orchestrator, configure-language-module, configure-mcp-agent
- **Entities:** command, flag
- **Value Objects:** command-result, command-error

### 📚 3. Documentation

Generation and management of internal and external documentation.

- **Aggregates:** documentation-site
- **Services:** documentation-generator
- **Entities:** doc-page, doc-section
- **Value Objects:** markdown-content

### 🧩 4. AI & NLP Integration

Integration with artificial intelligence, natural language processing, and MCP agents.

- **Entities:** agent, intent, prompt
- **Value Objects:** embedding, intent-name
- **Services:** intent-interpreter, prompt-generator, mcp-agent-controller

### 🔌 5. Infrastructure

Infrastructure elements and external adapters.

- **Entities:** adapter
- **Repositories:** file-system-repository, git-repository
- **Services:** logger, error-handler
- **Adapters:** postgres-adapter, redis-adapter, open-ai-adapter, aws-adapter

### 📦 6. Modules (Plugins)

Additional modules extending Hexy.

- **Entities:** plugin, module
- **Services:** module-loader, plugin-manager

### 📂 7. Shared Resources

Common elements reusable across contexts, following the layering convention.

```
shared/
├── application/
│   ├── use-cases/
│   └── dto/
├── domain/
│   ├── contracts/
│   │   ├── repository
│   │   ├── mapper
│   │   └── event-bus
│   ├── types/
│   │   ├── result
│   │   ├── either
│   │   ├── maybe
│   │   └── optional
│   ├── errors/
│   │   ├── base-error
│   │   └── domain-error
│   └── utils/
│       ├── date-utils
│       ├── string-utils
│       └── validation-utils
└── infrastructure/
    ├── adapters/
    │   ├── abstract-repository
    │   └── abstract-adapter
    ├── di/
    │   └── injection-tokens
    ├── functional/
    │   ├── composition
    │   ├── curry
    │   └── pipe
    └── logging/
        └── logger
```

## 📁 Final Base Structure

```
src/
├── context/
│   ├── core/
│   ├── cli/
│   ├── documentation/
│   ├── ai/
│   ├── infrastructure/
│   ├── modules/
│   └── shared/
│       ├── application/
│       ├── domain/
│       └── infrastructure/
```

## 🔖 Advantages

- High internal cohesion and low external dependency.
- Clear responsibilities and independent evolution.
- Ease of extension and creation of additional modules.
- Promotes a clear and internally shared ubiquitous language.

This document provides a clear and structured foundation for the development, maintenance, and extension of the Hexy framework.